/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 src/models/Chan.glb --root --types --transform 
Files: src/models/Chan.glb [3.77MB] > /Users/kalina/Projects/kalina/portfolio/Chan-transformed.glb [1.57MB] (58%)
*/

import * as THREE from "three";
import React from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";

type NodesType = {
  ["bodychan-feet"]: THREE.SkinnedMesh;
  ["bodychan-forearms"]: THREE.SkinnedMesh;
  ["bodychan-index_1"]: THREE.SkinnedMesh;
  ["bodychan-index_2"]: THREE.SkinnedMesh;
  ["bodychan-index_3"]: THREE.SkinnedMesh;
  ["bodychan-mid_1"]: THREE.SkinnedMesh;
  ["bodychan-mid_2"]: THREE.SkinnedMesh;
  ["bodychan-mid_3"]: THREE.SkinnedMesh;
  ["bodychan-pinky_1"]: THREE.SkinnedMesh;
  ["bodychan-pinky_2"]: THREE.SkinnedMesh;
  ["bodychan-pinky_3"]: THREE.SkinnedMesh;
  ["bodychan-ring_1"]: THREE.SkinnedMesh;
  ["bodychan-ring_2"]: THREE.SkinnedMesh;
  ["bodychan-ring_3"]: THREE.SkinnedMesh;
  ["bodychan-shins"]: THREE.SkinnedMesh;
  ["bodychan-thighs"]: THREE.SkinnedMesh;
  ["bodychan-thumb_1"]: THREE.SkinnedMesh;
  ["bodychan-thumb_2"]: THREE.SkinnedMesh;
  ["bodychan-tummy"]: THREE.SkinnedMesh;
  ["bodychan-upperarms"]: THREE.SkinnedMesh;
  ["bodychan-hands"]: THREE.SkinnedMesh;
  ["bodychan-head"]: THREE.SkinnedMesh;
  ["bodychan-hips"]: THREE.SkinnedMesh;
  ["bodychan-neck"]: THREE.SkinnedMesh;
  ["bodychan-torso"]: THREE.SkinnedMesh;
  root: THREE.Bone;
  ["MCH-torsoparent"]: THREE.Bone;
  ["MCH-spinehip_ik"]: THREE.Bone;
  ["MCH-shoulderikL"]: THREE.Bone;
  ["MCH-hand_ikparentL"]: THREE.Bone;
  ["MCH-upper_arm_ik_targetparentL"]: THREE.Bone;
  ["MCH-forearm_ik_midparentL"]: THREE.Bone;
  ["MCH-held-objectparentL"]: THREE.Bone;
  ["MCH-f_index01_ikparentL"]: THREE.Bone;
  ["MCH-thumb01_ikparentL"]: THREE.Bone;
  ["MCH-f_middle01_ikparentL"]: THREE.Bone;
  ["MCH-f_ring01_ikparentL"]: THREE.Bone;
  ["MCH-f_pinky01_ikparentL"]: THREE.Bone;
  ["MCH-shoulderikR"]: THREE.Bone;
  ["MCH-hand_ikparentR"]: THREE.Bone;
  ["MCH-upper_arm_ik_targetparentR"]: THREE.Bone;
  ["MCH-forearm_ik_midparentR"]: THREE.Bone;
  ["MCH-held-objectparentR"]: THREE.Bone;
  ["MCH-f_index01_ikparentR"]: THREE.Bone;
  ["MCH-thumb01_ikparentR"]: THREE.Bone;
  ["MCH-f_middle01_ikparentR"]: THREE.Bone;
  ["MCH-f_ring01_ikparentR"]: THREE.Bone;
  ["MCH-f_pinky01_ikparentR"]: THREE.Bone;
  ["MCH-foot_ikparentL"]: THREE.Bone;
  ["MCH-thigh_ik_targetparentL"]: THREE.Bone;
  ["MCH-shin_ik_midparentL"]: THREE.Bone;
  ["MCH-foot_ikparentR"]: THREE.Bone;
  ["MCH-thigh_ik_targetparentR"]: THREE.Bone;
  ["MCH-shin_ik_midparentR"]: THREE.Bone;
  ["MCH-lip_armBL001"]: THREE.Bone;
  ["MCH-lip_armBR001"]: THREE.Bone;
  ["MCH-lip_armTL001"]: THREE.Bone;
  ["MCH-lip_armTR001"]: THREE.Bone;
  [key: string]: THREE.Object3D;
};

type ChanProps = Readonly<React.JSX.IntrinsicElements["group"]> & {
  animationName?: string;
  timePosition?: number;
  loop?: boolean;
};

export function Chan({
  animationName = "bodychan-rig",
  timePosition,
  loop = true,
  ...props
}: ChanProps) {
  const group = React.useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF("/models/Chan-transformed.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as unknown as {
    nodes: NodesType;
    materials: { ["default"]: THREE.MeshPhysicalMaterial };
  };
  const { actions } = useAnimations(animations, group);

  // Play a specific pose/animation
  React.useEffect(() => {
    console.log(
      "Available animations:",
      animations.map((anim) => anim.name)
    );
    console.log("Available actions:", Object.keys(actions));

    if (actions[animationName]) {
      const action = actions[animationName];
      action?.reset().play();

      // Set specific time position if provided
      if (timePosition !== undefined) {
        action!.time = timePosition;
        action!.paused = true;
      }

      // Set loop behavior
      if (loop) {
        action?.setLoop(THREE.LoopRepeat, Infinity);
      } else {
        action?.setLoop(THREE.LoopOnce, 1);
        action!.clampWhenFinished = true;
      }
    }
  }, [actions, animations, animationName, timePosition, loop]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="bodychan-rig" position={[-0.75, 0, 0]}>
          <primitive object={nodes.root} />
          <primitive object={nodes["MCH-torsoparent"]} />
          <primitive object={nodes["MCH-spinehip_ik"]} />
          <primitive object={nodes["MCH-shoulderikL"]} />
          <primitive object={nodes["MCH-hand_ikparentL"]} />
          <primitive object={nodes["MCH-upper_arm_ik_targetparentL"]} />
          <primitive object={nodes["MCH-forearm_ik_midparentL"]} />
          <primitive object={nodes["MCH-held-objectparentL"]} />
          <primitive object={nodes["MCH-f_index01_ikparentL"]} />
          <primitive object={nodes["MCH-thumb01_ikparentL"]} />
          <primitive object={nodes["MCH-f_middle01_ikparentL"]} />
          <primitive object={nodes["MCH-f_ring01_ikparentL"]} />
          <primitive object={nodes["MCH-f_pinky01_ikparentL"]} />
          <primitive object={nodes["MCH-shoulderikR"]} />
          <primitive object={nodes["MCH-hand_ikparentR"]} />
          <primitive object={nodes["MCH-upper_arm_ik_targetparentR"]} />
          <primitive object={nodes["MCH-forearm_ik_midparentR"]} />
          <primitive object={nodes["MCH-held-objectparentR"]} />
          <primitive object={nodes["MCH-f_index01_ikparentR"]} />
          <primitive object={nodes["MCH-thumb01_ikparentR"]} />
          <primitive object={nodes["MCH-f_middle01_ikparentR"]} />
          <primitive object={nodes["MCH-f_ring01_ikparentR"]} />
          <primitive object={nodes["MCH-f_pinky01_ikparentR"]} />
          <primitive object={nodes["MCH-foot_ikparentL"]} />
          <primitive object={nodes["MCH-thigh_ik_targetparentL"]} />
          <primitive object={nodes["MCH-shin_ik_midparentL"]} />
          <primitive object={nodes["MCH-foot_ikparentR"]} />
          <primitive object={nodes["MCH-thigh_ik_targetparentR"]} />
          <primitive object={nodes["MCH-shin_ik_midparentR"]} />
          <primitive object={nodes["MCH-lip_armBL001"]} />
          <primitive object={nodes["MCH-lip_armBR001"]} />
          <primitive object={nodes["MCH-lip_armTL001"]} />
          <primitive object={nodes["MCH-lip_armTR001"]} />
        </group>
        <skinnedMesh
          name="bodychan-feet"
          geometry={nodes["bodychan-feet"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-feet"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-forearms"
          geometry={nodes["bodychan-forearms"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-forearms"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-index_1"
          geometry={nodes["bodychan-index_1"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-index_1"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-index_2"
          geometry={nodes["bodychan-index_2"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-index_2"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-index_3"
          geometry={nodes["bodychan-index_3"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-index_3"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-mid_1"
          geometry={nodes["bodychan-mid_1"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-mid_1"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-mid_2"
          geometry={nodes["bodychan-mid_2"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-mid_2"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-mid_3"
          geometry={nodes["bodychan-mid_3"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-mid_3"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-pinky_1"
          geometry={nodes["bodychan-pinky_1"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-pinky_1"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-pinky_2"
          geometry={nodes["bodychan-pinky_2"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-pinky_2"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-pinky_3"
          geometry={nodes["bodychan-pinky_3"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-pinky_3"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-ring_1"
          geometry={nodes["bodychan-ring_1"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-ring_1"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-ring_2"
          geometry={nodes["bodychan-ring_2"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-ring_2"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-ring_3"
          geometry={nodes["bodychan-ring_3"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-ring_3"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-shins"
          geometry={nodes["bodychan-shins"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-shins"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-thighs"
          geometry={nodes["bodychan-thighs"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-thighs"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-thumb_1"
          geometry={nodes["bodychan-thumb_1"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-thumb_1"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-thumb_2"
          geometry={nodes["bodychan-thumb_2"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-thumb_2"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-tummy"
          geometry={nodes["bodychan-tummy"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-tummy"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-upperarms"
          geometry={nodes["bodychan-upperarms"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-upperarms"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-hands"
          geometry={nodes["bodychan-hands"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-hands"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-head"
          geometry={nodes["bodychan-head"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-head"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-hips"
          geometry={nodes["bodychan-hips"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-hips"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-neck"
          geometry={nodes["bodychan-neck"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-neck"].skeleton}
          position={[-0.75, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-torso"
          geometry={nodes["bodychan-torso"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-torso"].skeleton}
          position={[-0.75, 0, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/Chan-transformed.glb");
