/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Frontflip.glb --output src/components/Frontflip.tsx --transform --types 
Files: public/models/Frontflip.glb [1.46MB] > /Users/kalina/Projects/kalina/portfolio/src/components/Frontflip-transformed.glb [302.28KB] (79%)
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGraph, useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";

type NodesType = {
  ["bodychan-feet"]: THREE.SkinnedMesh;
  ["bodychan-forearms"]: THREE.SkinnedMesh;
  ["bodychan-hands"]: THREE.SkinnedMesh;
  ["bodychan-head"]: THREE.SkinnedMesh;
  ["bodychan-hips"]: THREE.SkinnedMesh;
  ["bodychan-index_1"]: THREE.SkinnedMesh;
  ["bodychan-index_2"]: THREE.SkinnedMesh;
  ["bodychan-index_3"]: THREE.SkinnedMesh;
  ["bodychan-mid_1"]: THREE.SkinnedMesh;
  ["bodychan-mid_2"]: THREE.SkinnedMesh;
  ["bodychan-mid_3"]: THREE.SkinnedMesh;
  ["bodychan-neck"]: THREE.SkinnedMesh;
  ["bodychan-pinky_1"]: THREE.SkinnedMesh;
  ["bodychan-pinky_2"]: THREE.SkinnedMesh;
  ["bodychan-pinky_3"]: THREE.SkinnedMesh;
  ["bodychan-ring_1"]: THREE.SkinnedMesh;
  ["bodychan-ring_2"]: THREE.SkinnedMesh;
  ["bodychan-ring_3"]: THREE.SkinnedMesh;
  ["bodychan-shins"]: THREE.SkinnedMesh;
  ["bodychan-thighs"]: THREE.SkinnedMesh;
  ["bodychan-thumb_1"]: THREE.SkinnedMesh;
  ["bodychan-thumb_2"]: THREE.SkinnedMesh;
  ["bodychan-torso"]: THREE.SkinnedMesh;
  ["bodychan-tummy"]: THREE.SkinnedMesh;
  ["bodychan-upperarms"]: THREE.SkinnedMesh;
  mixamorigHips: THREE.Bone;
  [key: string]: THREE.Object3D;
};

type FrontflipProps = Readonly<React.JSX.IntrinsicElements["group"]> & {
  animationName?: string;
  timePosition?: number;
  loop?: boolean;
};

export function Frontflip({
  animationName = "Armature|mixamo.com|Layer0",
  timePosition,
  loop = true,
  ...props
}: FrontflipProps) {
  const group = React.useRef<THREE.Group>(null);
  const { scene: modelScene, animations } = useGLTF("models/Frontflip-transformed.glb");

  const clone = React.useMemo(
    () => SkeletonUtils.clone(modelScene),
    [modelScene]
  );
  const { nodes, materials } = useGraph(clone) as unknown as {
    nodes: NodesType;
    materials: { ["default"]: THREE.MeshPhysicalMaterial };
  };
  const mixer = useRef<THREE.AnimationMixer | null>(null);

  // Play a specific pose/animation
  React.useEffect(() => {
    if (!group.current || animations.length === 0) return;

    // Create the mixer if not already made
    mixer.current ??= new THREE.AnimationMixer(group.current);

    const clip =
      animations.find((a) => a.name === animationName) ?? animations[0];
    const action = mixer.current.clipAction(clip);
    console.log(
      "Frontflip animations:",
      animations.map((a) => a.name),
      clip,
      clip.tracks.map((t) => t.name)
    );

    action.reset().play();

    if (timePosition !== undefined) {
      action.time = timePosition;
      action.paused = true;
    }

    if (loop) {
      action.setLoop(THREE.LoopRepeat, Infinity);
    } else {
      action.setLoop(THREE.LoopOnce, 1);
      action.clampWhenFinished = true;
    }

    return () => {
      action.stop();
    };
  }, [animationName, animations, timePosition, loop, group]);

  useFrame((state, delta: number) => {
    if (mixer.current) {
      mixer.current.update(delta);
    }
  });
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]}>
          <primitive object={nodes.mixamorigHips} />
        </group>
        <skinnedMesh
          name="bodychan-feet"
          geometry={nodes["bodychan-feet"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-feet"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-forearms"
          geometry={nodes["bodychan-forearms"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-forearms"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-hands"
          geometry={nodes["bodychan-hands"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-hands"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-head"
          geometry={nodes["bodychan-head"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-head"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-hips"
          geometry={nodes["bodychan-hips"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-hips"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-index_1"
          geometry={nodes["bodychan-index_1"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-index_1"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-index_2"
          geometry={nodes["bodychan-index_2"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-index_2"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-index_3"
          geometry={nodes["bodychan-index_3"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-index_3"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-mid_1"
          geometry={nodes["bodychan-mid_1"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-mid_1"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-mid_2"
          geometry={nodes["bodychan-mid_2"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-mid_2"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-mid_3"
          geometry={nodes["bodychan-mid_3"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-mid_3"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-neck"
          geometry={nodes["bodychan-neck"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-neck"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-pinky_1"
          geometry={nodes["bodychan-pinky_1"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-pinky_1"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-pinky_2"
          geometry={nodes["bodychan-pinky_2"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-pinky_2"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-pinky_3"
          geometry={nodes["bodychan-pinky_3"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-pinky_3"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-ring_1"
          geometry={nodes["bodychan-ring_1"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-ring_1"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-ring_2"
          geometry={nodes["bodychan-ring_2"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-ring_2"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-ring_3"
          geometry={nodes["bodychan-ring_3"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-ring_3"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-shins"
          geometry={nodes["bodychan-shins"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-shins"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-thighs"
          geometry={nodes["bodychan-thighs"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-thighs"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-thumb_1"
          geometry={nodes["bodychan-thumb_1"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-thumb_1"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-thumb_2"
          geometry={nodes["bodychan-thumb_2"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-thumb_2"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-torso"
          geometry={nodes["bodychan-torso"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-torso"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-tummy"
          geometry={nodes["bodychan-tummy"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-tummy"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="bodychan-upperarms"
          geometry={nodes["bodychan-upperarms"].geometry}
          material={materials["default"]}
          skeleton={nodes["bodychan-upperarms"].skeleton}
          rotation={[Math.PI / 2, 0, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/Frontflip-transformed.glb");
